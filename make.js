// script for automaking markdown files
// but still needed a manual fix of mistakes :(
var fs = require("fs")
var mdFolders = []
var ignoredFiles = [
	"BackgroundGirls",
	"BGSprite",
	"BlendModeEffect",
	"ChartParser",
	"ColorSwap",
	"Controls",
	"CustomFadeTransition",
	"CutsceneHandler",
	"Discord",
	"FlashingState",
	"FlxUIDropDownMenuCustom",
	"GitarooPause",
	"LatencyState",
	"LoadingState",
	"OutdatedState",
	"Paths",
	"PhillyGlow",
	"PlayerSettings",
	"Snd",
	"SndTV",
	"WiggleEffect"
]
fs.readdirSync("sourceFiles").forEach(file => {
	var className = file.substring(0, file.length - 3)
	for (s of ignoredFiles) if (s == className) return

	var srcFile = fs.readFileSync("sourceFiles/" + file).toString().split("\n")
	var importsFile = []
	for (let i = 0; i < srcFile.length; i++)
		if (srcFile[i].startsWith("import "))
			importsFile.push(srcFile[i].substring(7, srcFile[i].lastIndexOf(";")));

	for (let i = 0; i < srcFile.length; i++)
		if (srcFile[i].startsWith("class " + className))
		{
			//console.log(srcFile[i])
			srcFile = srcFile.slice(i + 1 + (srcFile[i].includes("{") ? 0 : 1), srcFile.length)
			break
		}
	for (let i = 0; i < srcFile.length; i++)
		if (srcFile[i].startsWith("}"))
		{
			srcFile = srcFile.slice(0, i)
			break
		}
	for (let i = 0; i < srcFile.length; i++)
	{
		if (srcFile[i].includes("//"))
			srcFile[i] = srcFile[i].substring(0, srcFile[i].lastIndexOf(" //"))
		if (srcFile[i].includes("#"))
			srcFile[i] = srcFile[i].substring(0, srcFile[i].lastIndexOf("#"))
		if (srcFile[i].includes("(default, set)"))
			srcFile[i] = srcFile[i].replaceAll("(default, set)", "")
		if (srcFile[i].includes("(default, null)"))
			srcFile[i] = srcFile[i].replaceAll("(default, null)", "")
	}

	srcFile = srcFile.join("").split(";")
	for (let i = 0; i < srcFile.length; i++)
		srcFile[i] = srcFile[i].replaceAll("\t", "")

	var varsToFormat = [
		"inline public static var",
		"inline private static var",
		"public static var",
		"private static var",
		"public var",
		"private var",
		"var"
	];
	var d = []
	for (let i = 0; i < srcFile.length; i++)
		for (thing of varsToFormat)
			if (srcFile[i].startsWith(thing))
				d.push(srcFile[i]);
	srcFile = d;

	var varsCool = getVariables(srcFile, varsToFormat, importsFile);
	if (varsCool.length > 0)
	{
		mdFolders.push({name: className, vars: varsCool})
		fs.writeFileSync("source/" + className + ".md", formatToMarkDown(varsCool))
	}
});
var tosave = "# Psych Engine variables list\nAutomatically generated by [script.js](script.js), but manually fixed by me some mistakes\n## Classes"
for (thing of mdFolders)
	tosave += "\n### [" + thing.name.substring(thing.name.indexOf("/") + 1, thing.name.indexOf(".")) + "](" + thing.name + ")"
fs.writeFileSync("README.md", tosave)

saveDescsTXT();

function saveDescsTXT()
{
	var tosavedescs = ""
	if (!fs.existsSync("descs.txt"))
	{
		for (thing of mdFolders)
		{
			tosavedescs += "[" + thing.name + "]\n"
			for (aa of thing.vars)
				tosavedescs += aa.name + " -=- \n"
			tosavedescs += "\n"
		}
	}
	fs.writeFileSync("descs.txt", tosavedescs)
}

function formatToMarkDown(variables)
{
	var toret = ""
	for (let i = 0; i < variables.length; i++)
		toret += 
			"## " + variables[i].name +
			"\n* **Description =** putdeschere" +
			(variables[i].isStatic ? "\n* **Static**" : "") +
			"\n* **Type =** [" + variables[i].type + "](https://api.haxeflixel.com/" + variables[i].typeURL + ".html)" +
			(variables[i].value != "" ? "\n* **Default value =** " + variables[i].value + "\n\n" : "\n\n")
	return toret
}

function getVariables(srcFile, variables, importsFile)
{
	var toret = []
	for (let i = 0; i < srcFile.length; i++)
		for (variable of variables)
			if (srcFile[i].startsWith(variable))
			{
				var varName = srcFile[i].substring(variable.length + 1, srcFile[i].length);
				if (srcFile[i].includes(":"))
					varName = srcFile[i].substring(variable.length + 1, srcFile[i].indexOf(":"))
				else if (srcFile[i].includes(" = "))
					varName = srcFile[i].substring(variable.length + 1, srcFile[i].indexOf(" = "))

				var varType = srcFile[i].substring(variable.length + varName.length + 2, srcFile[i].length)
				if (srcFile[i].includes(" = "))
					varType = srcFile[i].substring(variable.length + varName.length + 2, srcFile[i].indexOf(" = "))
				if (varType.length == 1)
					varType = "Dynamic"

				var varTypeURL = formatToClassName(varType);
				for (thing of importsFile)
					if (thing.includes(varTypeURL))
						varTypeURL = thing.replaceAll(".", "/");

				var varValue = srcFile[i].substring(variable.length + varName.length + varType.length + 5, srcFile[i].length);
				if (varValue == " ")
					varType = ""
				//console.log(varName, varType);

				toret.push({name: varName, type: varType, typeURL: varTypeURL, value: varValue, isStatic: srcFile[i].includes("static")});
			}
	return toret
}

function formatToClassName(tp)
{
	if (tp.includes("->"))
		tp = tp.substring(0, tp.indexOf("->"))
	if (tp.includes("<"))
		tp = tp.substring(0, tp.indexOf("<"))
	return tp
}